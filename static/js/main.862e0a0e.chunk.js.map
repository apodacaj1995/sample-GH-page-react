{"version":3,"sources":["Components/Header.js","Components/Navbar.js","Components/ContentLabel.js","Components/Content.js","Components/ContentBees.js","Components/ContentCaterpillars.js","ContentHome.js","Components/ContentLadybugs.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","React","Component","Navbar","to","ContentLabel","this","props","labelText","Content","additionalInfo","additionalImage","source","alt","bodyText","ContentBees","ContentCaterpillars","ContentHome","ContentLadybugs","App","exact","path","component","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4UAqBeA,G,6KAbX,OAEI,6BACI,4BAAQC,UAAU,UAClB,wBAAIA,UAAU,gBAAd,gBACA,yBAAKA,UAAU,cAAcC,IAAI,2D,GATxBC,IAAMC,YCkBZC,G,6KAdX,OAEI,yBAAKJ,UAAU,UAEX,kBAAC,IAAD,CAASK,GAAG,IAAIL,UAAU,eAA1B,QACA,kBAAC,IAAD,CAASK,GAAG,QAAQL,UAAU,eAA9B,SACA,kBAAC,IAAD,CAASK,GAAG,gBAAgBL,UAAU,eAAtC,iBACA,kBAAC,IAAD,CAASK,GAAG,YAAYL,UAAU,eAAlC,iB,GAXSE,IAAMC,YCeZG,E,uKAdX,OACI,yBAAKN,UAAU,2BACX,0BAAMA,UAAU,eAAhB,SAIA,0BAAMA,UAAU,iBACXO,KAAKC,MAAMC,gB,GAXDP,IAAMC,WCyDlBO,E,uKAlDP,IAAIC,EAAiBJ,KAAKC,MAAMG,eA6BpC,OAxBOA,GACuB,yBAAKX,UAAU,sBACb,oEAA0CW,IAUhDJ,KAAKC,MAAMI,iBAKV,yBAAKZ,UAAU,mBAAmBC,IAAMM,KAAKC,MAAMI,kBAQ1E,0BAAMZ,UAAU,WAEZ,yBAAKA,UAAU,gBAAgBC,IAAKM,KAAKC,MAAMK,OAAQC,IAAI,oBAE3D,kBAAC,EAAD,CACIL,UAAcF,KAAKC,MAAMC,YAI7B,uBAAGT,UAAY,gBACVO,KAAKC,MAAMO,UAVpB,8CAcKR,KAAKC,MAAMG,oB,GAhDFT,IAAMC,WCiBba,E,uKAbX,OACI,kBAAC,EAAD,CACIH,OAAS,yEACTJ,UAAY,cACZM,SAAW,iBAEXJ,eAAe,qCACfC,gBAAgB,iF,GAXFV,IAAMC,WCajBc,E,uKATX,OACI,kBAAC,EAAD,CACIJ,OAAS,gFACTJ,UAAY,4BACZM,SAAW,+B,GARWb,IAAMC,WCSzBe,E,uKANX,OACG,0E,GALmBhB,IAAMC,WCejBgB,E,uKAVX,OACI,kBAAC,EAAD,CACIN,OAAS,6EACTJ,UAAY,2BACZM,SAAW,6B,GAROb,IAAMC,WCwCrBiB,MA7Bf,WACE,OACE,kBAAC,IAAD,KACA,yBAAKpB,UAAU,OAGb,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,yBAAKA,UAAU,mBAGb,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAO,IAAIC,UAAWL,IACnC,kBAAC,IAAD,CAAOI,KAAK,QAAQC,UAAWP,IAC/B,kBAAC,IAAD,CAAOM,KAAK,gBAAgBC,UAAWN,IACvC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAO,YAAYC,UAAWJ,KAO/C,uBAAGK,KAAK,wDCzBQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.862e0a0e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Header.css';\r\n\r\nclass Header extends React.Component {\r\n\r\n\r\n    render () {\r\n    return ( \r\n\r\n        <div>\r\n            <header className=\"header\">\r\n            <h1 className=\"header_title\">Insectopedia</h1>\r\n            <img className=\"header_logo\" src=\"https://img.icons8.com/officel/16/000000/bee.png\"/>\r\n            </header>\r\n\r\n        </div>    \r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Navbar.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nclass Navbar extends React.Component {\r\n\r\n\r\n    render () {\r\n    return ( \r\n\r\n        <nav className=\"navbar\">\r\n            {/* these links change the current route */}\r\n            <NavLink to=\"/\" className=\"navbar_link\">Home</NavLink>\r\n            <NavLink to=\"/bees\" className=\"navbar_link\">Bees </NavLink>\r\n            <NavLink to=\"/caterpillars\" className=\"navbar_link\">Caterpillars </NavLink>\r\n            <NavLink to=\"/ladybugs\" className=\"navbar_link\">Ladybugs</NavLink>\r\n\r\n        </nav>    \r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nclass ContentLabel extends React.Component {\r\n\r\n\r\n    render () {\r\n    return ( \r\n        <div className=\"content_label-container\">\r\n            <span className=\"content_key\">\r\n                Name:\r\n            </span>\r\n\r\n            <span className=\"content_value\">\r\n                {this.props.labelText}\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n}\r\n\r\nexport default ContentLabel;","import React from 'react';\r\n\r\nimport ContentLabel from './ContentLabel';\r\n\r\nclass Content extends React.Component {\r\n    render () {\r\n\r\n// this is how we can render content CONDTIONALLY\r\n        let additionalInfo = this.props.additionalInfo;\r\n        let additionalContainer;\r\n\r\n//fill in the additional container IF we have additional information to add to the DOM\r\n\r\n        if(additionalInfo) {\r\n            additionalContainer = <div className=\"content_additional\">\r\n                                    <p>Check out this additional information:{additionalInfo}</p>\r\n                                    \r\n                                </div>\r\n        }\r\n        else {\r\n\r\n        }\r\n\r\n\r\n// now to render a picture conditionally\r\n        let additionalImage = this.props.additionalImage;\r\n        let additionalImgDiv;\r\n        \r\n\r\n        if(additionalImage) {\r\n            additionalImgDiv = <img className=\"image_additional\" src= {this.props.additionalImage}></img>\r\n        }\r\n        else {\r\n\r\n        }\r\n\r\n\r\n    return ( \r\n        <main className=\"content\">\r\n            \r\n            <img className=\"content_image\" src={this.props.source} alt=\"Image of Insect\"></img>\r\n\r\n            <ContentLabel \r\n                labelText =  {this.props.labelText} />\r\n\r\n\r\n\r\n            <p className = \"content_body\"> \r\n                {this.props.bodyText}\r\n            </p>\r\n\r\n            By the way, check out this additional info:\r\n            {this.props.additionalInfo}\r\n        </main>  \r\n        )\r\n    }\r\n}\r\n\r\nexport default Content;","import React from 'react';\r\n\r\nimport Content from './Content'\r\n\r\nclass ContentBees extends React.Component {\r\n\r\n\r\n    render () {\r\n    return ( \r\n        <Content \r\n            source = \"https://cdn.pixabay.com/photo/2019/05/10/17/28/bee-4194031_960_720.jpg\"\r\n            labelText = \"Bees (Apis)\"\r\n            bodyText = \"Bees are best!\"\r\n\r\n            additionalInfo=\"Did you know that bees make honey?\"\r\n            additionalImage=\"https://cdn.pixabay.com/photo/2017/07/26/20/00/honey-2542952_960_720.jpg\"\r\n        />\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContentBees;","import React from 'react';\r\n\r\nimport Content from './Content'\r\n\r\nclass ContentCaterpillars extends React.Component {\r\n\r\n\r\n    render () {\r\n    return ( \r\n        <Content\r\n            source = \"https://cdn.pixabay.com/photo/2014/11/03/16/09/caterpillar-515370_960_720.jpg\"\r\n            labelText = \"Caterpillars (Lepidotera)\"\r\n            bodyText = \"Caterpillars are cool!\"\r\n        />\r\n        )\r\n    }\r\n}\r\nexport default ContentCaterpillars;","import React from 'react';\r\n\r\n\r\nclass ContentHome extends React.Component {\r\n\r\n\r\n    render () {\r\n    return ( \r\n       <p>Click on one of the links to learn more</p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContentHome;","import React from 'react';\r\n\r\nimport Content from './Content'\r\n\r\nclass ContentLadybugs extends React.Component {\r\n\r\n\r\n    render () {\r\n    return ( \r\n        <Content\r\n            source = \"https://cdn.pixabay.com/photo/2016/06/21/08/16/ladybug-1470629_960_720.jpg\"\r\n            labelText = \"Ladybugs (Coccinellidae)\"\r\n            bodyText = \"Ladybugs are lovely!\"\r\n        />\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContentLadybugs;","import React from 'react';\nimport {HashRouter, Route} from 'react-router-dom';\n// import logo from './logo.svg';\nimport './App.css';\n\n\nimport Header from \"./Components/Header\";\nimport Navbar from \"./Components/Navbar\";\n// import Content from \"./Components/Content\";\nimport ContentBees from \"./Components/ContentBees\";\n// import ContentLabel from \"./Components/ContentLabel\";\nimport ContentCaterpillars from \"./Components/ContentCaterpillars\";\nimport ContentHome from './ContentHome';\nimport ContentLadybugs from './Components/ContentLadybugs';\n\nfunction App() {\n  return (\n    <HashRouter>\n    <div className=\"App\">\n   \n\n      <Header /> \n      <Navbar />\n\n      <div className=\"content-section\">\n        {/* This will give you Content Bees as default on home\n         <Route path=\"/\" component={ContentBees}/>     */}\n        <Route exact path = \"/\" component={ContentHome}/>\n        <Route path=\"/bees\" component={ContentBees}/>\n        <Route path=\"/caterpillars\" component={ContentCaterpillars}/>\n        <Route exact path = \"/ladybugs\" component={ContentLadybugs}/>\n      </div>\n\n      {/* <Content /> */}\n      {/* <ContentLabel /> */}\n      {/* <ContentBees /> \n      <ContentCaterpillars /> */}\n    <a href=\"https://img.icons8.com/officel/16/000000/bee.png\"/>\n\n    </div> \n    </HashRouter> \n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}